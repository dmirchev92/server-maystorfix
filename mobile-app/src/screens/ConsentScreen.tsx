import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Switch,
  Linking,
} from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '../store';
import { updateConsent } from '../store/slices/appSlice';
import ApiService from '../services/ApiService';

interface ConsentItem {
  id: string;
  title: string;
  description: string;
  required: boolean;
  enabled: boolean;
  legalBasis: string;
}

const ConsentScreen: React.FC = () => {
  const dispatch = useDispatch();
  const { currentMode, businessHours } = useSelector((state: RootState) => state.app);
  
  const [consents, setConsents] = useState<ConsentItem[]>([
    {
      id: 'data_processing',
      title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏',
      description: '–°—ä–≥–ª–∞—Å—è–≤–∞–º —Å–µ –¥–∞–Ω–Ω–∏—Ç–µ –º–∏ –¥–∞ –±—ä–¥–∞—Ç –æ–±—Ä–∞–±–æ—Ç–≤–∞–Ω–∏ –∑–∞ —Ü–µ–ª–∏—Ç–µ –Ω–∞ —É—Å–ª—É–≥–∞—Ç–∞',
      required: true,
      enabled: true,
      legalBasis: '–î–æ–≥–æ–≤–æ—Ä',
    },
    {
      id: 'ai_communication',
      title: 'AI –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è',
      description: '–°—ä–≥–ª–∞—Å—è–≤–∞–º —Å–µ –¥–∞ –ø–æ–ª—É—á–∞–≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏ –æ—Ç AI —Å–∏—Å—Ç–µ–º–∞',
      required: false,
      enabled: false,
      legalBasis: '–°—ä–≥–ª–∞—Å–∏–µ',
    },
    {
      id: 'data_storage',
      title: '–°—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω–∏',
      description: '–°—ä–≥–ª–∞—Å—è–≤–∞–º —Å–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∏—Ç–µ –º–∏ –¥–∞ –±—ä–¥–∞—Ç —Å—ä—Ö—Ä–∞–Ω—è–≤–∞–Ω–∏ –∑–∞ –ø–æ–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ —É—Å–ª—É–≥–∞—Ç–∞',
      required: false,
      enabled: false,
      legalBasis: '–°—ä–≥–ª–∞—Å–∏–µ',
    },
    {
      id: 'analytics',
      title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
      description: '–°—ä–≥–ª–∞—Å—è–≤–∞–º —Å–µ –¥–∞–Ω–Ω–∏—Ç–µ –º–∏ –¥–∞ –±—ä–¥–∞—Ç –∏–∑–ø–æ–ª–∑–≤–∞–Ω–∏ –∑–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–∏ —Ü–µ–ª–∏',
      required: false,
      enabled: false,
      legalBasis: '–°—ä–≥–ª–∞—Å–∏–µ',
    },
    {
      id: 'third_party',
      title: '–¢—Ä–µ—Ç–∏ —Å—Ç—Ä–∞–Ω–∏',
      description: '–°—ä–≥–ª–∞—Å—è–≤–∞–º —Å–µ –¥–∞–Ω–Ω–∏—Ç–µ –º–∏ –¥–∞ –±—ä–¥–∞—Ç —Å–ø–æ–¥–µ–ª—è–Ω–∏ —Å –ø–∞—Ä—Ç–Ω—å–æ—Ä–∏ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—è–Ω–µ –Ω–∞ —É—Å–ª—É–≥–∞—Ç–∞',
      required: false,
      enabled: false,
      legalBasis: '–°—ä–≥–ª–∞—Å–∏–µ',
    },
  ]);

  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    loadCurrentConsents();
  }, []);

  const loadCurrentConsents = async () => {
    try {
      setIsLoading(true);
      // TODO: Load current consents from backend
      // const currentConsents = await ApiService.getConsents();
      // setConsents(currentConsents);
    } catch (error) {
      console.error('Error loading consents:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleConsentChange = (consentId: string, enabled: boolean) => {
    setConsents(prev => 
      prev.map(consent => 
        consent.id === consentId 
          ? { ...consent, enabled }
          : consent
      )
    );
  };

  const handleSaveConsents = async () => {
    try {
      setIsLoading(true);
      
      // Validate required consents
      const requiredConsents = consents.filter(c => c.required);
      const missingRequired = requiredConsents.filter(c => !c.enabled);
      
      if (missingRequired.length > 0) {
        Alert.alert(
          '–ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ —Å—ä–≥–ª–∞—Å–∏—è',
          '–¢—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–∏–µ–º–µ—Ç–µ –≤—Å–∏—á–∫–∏ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ —Å—ä–≥–ª–∞—Å–∏—è –∑–∞ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ.',
          [{ text: 'OK' }]
        );
        return;
      }

      // Save consents to backend
      const consentData = consents.map(consent => ({
        consentType: consent.id,
        status: (consent.enabled ? 'granted' : 'withdrawn') as 'granted' | 'withdrawn',
        legalBasis: consent.legalBasis,
        description: consent.description,
        timestamp: new Date().toISOString(),
      }));

      // TODO: Save to backend
      // await ApiService.updateConsents(consentData);

      // Update local state
      dispatch(updateConsent({ 
        hasGDPRConsent: true,
        consentTimestamp: new Date().toISOString(),
        consentDetails: consentData
      }));

      Alert.alert(
        '–£—Å–ø–µ—à–Ω–æ',
        '–í–∞—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è –∑–∞ –ø–æ–≤–µ—Ä–∏—Ç–µ–ª–Ω–æ—Å—Ç —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏.',
        [{ text: 'OK' }]
      );

    } catch (error) {
      console.error('Error saving consents:', error);
      Alert.alert(
        '–ì—Ä–µ—à–∫–∞',
        '–í—ä–∑–Ω–∏–∫–Ω–∞ –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è—Ç–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.',
        [{ text: 'OK' }]
      );
    } finally {
      setIsLoading(false);
    }
  };

  const openPrivacyPolicy = () => {
    // TODO: Open privacy policy URL
    Linking.openURL('https://servicetextpro.com/privacy');
  };

  const openDataRights = () => {
    // TODO: Navigate to data rights screen
    Alert.alert('–ü—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ', '–¢—É–∫ –º–æ–∂–µ—Ç–µ –¥–∞ —É–ø—Ä–∞–∂–Ω–∏—Ç–µ –ø—Ä–∞–≤–∞—Ç–∞ —Å–∏ –∑–∞ –¥–æ—Å—Ç—ä–ø, –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –∏ –ø—Ä–µ–Ω–æ—Å –Ω–∞ –¥–∞–Ω–Ω–∏.');
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –ø–æ–≤–µ—Ä–∏—Ç–µ–ª–Ω–æ—Å—Ç</Text>
        <Text style={styles.subtitle}>
          –£–ø—Ä–∞–≤–ª—è–≤–∞–π—Ç–µ –∫–∞–∫ –¥–∞–Ω–Ω–∏—Ç–µ –≤–∏ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç –∏ —Å—ä—Ö—Ä–∞–Ω—è–≤–∞—Ç
        </Text>
      </View>

      <View style={styles.infoSection}>
        <Text style={styles.infoText}>
          –í —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å GDPR, –∏–º–∞—Ç–µ –ø—Ä–∞–≤–æ –¥–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞—Ç–µ –∫–∞–∫ –¥–∞–Ω–Ω–∏—Ç–µ –≤–∏ —Å–µ –æ–±—Ä–∞–±–æ—Ç–≤–∞—Ç. 
          –ù—è–∫–æ–∏ —Å—ä–≥–ª–∞—Å–∏—è —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—è–Ω–µ –Ω–∞ —É—Å–ª—É–≥–∞—Ç–∞.
        </Text>
      </View>

      <View style={styles.consentsContainer}>
        {consents.map((consent) => (
          <View key={consent.id} style={styles.consentItem}>
            <View style={styles.consentHeader}>
              <Text style={styles.consentTitle}>
                {consent.title}
                {consent.required && <Text style={styles.required}> *</Text>}
              </Text>
              <Switch
                value={consent.enabled}
                onValueChange={(enabled) => handleConsentChange(consent.id, enabled)}
                disabled={consent.required}
                trackColor={{ false: '#e0e0e0', true: '#4CAF50' }}
                thumbColor={consent.enabled ? '#fff' : '#f4f3f4'}
              />
            </View>
            
            <Text style={styles.consentDescription}>{consent.description}</Text>
            
            <View style={styles.consentMeta}>
              <Text style={styles.legalBasis}>
                –ü—Ä–∞–≤–Ω–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {consent.legalBasis}
              </Text>
              {consent.required && (
                <Text style={styles.requiredText}>–ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ</Text>
              )}
            </View>
          </View>
        ))}
      </View>

      <View style={styles.actionsContainer}>
        <TouchableOpacity
          style={styles.actionButton}
          onPress={openPrivacyPolicy}
        >
          <Text style={styles.actionButtonText}>üìã –ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–æ–≤–µ—Ä–∏—Ç–µ–ª–Ω–æ—Å—Ç</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.actionButton}
          onPress={openDataRights}
        >
          <Text style={styles.actionButtonText}>üîí –ü—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.saveButton, isLoading && styles.saveButtonDisabled]}
          onPress={handleSaveConsents}
          disabled={isLoading}
        >
          <Text style={styles.saveButtonText}>
            {isLoading ? '–ó–∞–ø–∞–∑–≤–∞–Ω–µ...' : 'üíæ –ó–∞–ø–∞–∑–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è—Ç–∞'}
          </Text>
        </TouchableOpacity>
      </View>

      <View style={styles.footer}>
        <Text style={styles.footerText}>
          –ó–∞ –≤—ä–ø—Ä–æ—Å–∏ –æ—Ç–Ω–æ—Å–Ω–æ –ø–æ–≤–µ—Ä–∏—Ç–µ–ª–Ω–æ—Å—Ç—Ç–∞, –º–æ–ª—è —Å–≤—ä—Ä–∂–µ—Ç–µ —Å–µ —Å –Ω–∞—Å –Ω–∞ privacy@servicetextpro.com
        </Text>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    padding: 20,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#7f8c8d',
    lineHeight: 22,
  },
  infoSection: {
    padding: 20,
    backgroundColor: '#e8f5e8',
    margin: 20,
    borderRadius: 8,
  },
  infoText: {
    fontSize: 14,
    color: '#2d5a2d',
    lineHeight: 20,
    textAlign: 'center',
  },
  consentsContainer: {
    padding: 20,
  },
  consentItem: {
    backgroundColor: '#fff',
    padding: 16,
    marginBottom: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  consentHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  consentTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2c3e50',
    flex: 1,
    marginRight: 16,
  },
  required: {
    color: '#e74c3c',
    fontWeight: 'bold',
  },
  consentDescription: {
    fontSize: 14,
    color: '#555',
    lineHeight: 20,
    marginBottom: 12,
  },
  consentMeta: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  legalBasis: {
    fontSize: 12,
    color: '#7f8c8d',
    fontStyle: 'italic',
  },
  requiredText: {
    fontSize: 12,
    color: '#e74c3c',
    fontWeight: '600',
  },
  actionsContainer: {
    padding: 20,
  },
  actionButton: {
    backgroundColor: '#3498db',
    padding: 16,
    borderRadius: 8,
    marginBottom: 12,
    alignItems: 'center',
  },
  actionButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  saveButton: {
    backgroundColor: '#27ae60',
    padding: 18,
    borderRadius: 8,
    marginTop: 8,
    alignItems: 'center',
  },
  saveButtonDisabled: {
    backgroundColor: '#95a5a6',
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  footer: {
    padding: 20,
    backgroundColor: '#fff',
    marginTop: 20,
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
  },
  footerText: {
    fontSize: 12,
    color: '#7f8c8d',
    textAlign: 'center',
    lineHeight: 18,
  },
});

export default ConsentScreen;
