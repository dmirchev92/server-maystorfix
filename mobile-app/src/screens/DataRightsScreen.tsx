import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  TextInput,
  Modal,
  ActivityIndicator,
} from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '../store';
import ApiService from '../services/ApiService';

interface DataRequest {
  id: string;
  type: 'access' | 'deletion' | 'portability' | 'correction' | 'restriction';
  status: 'pending' | 'processing' | 'completed' | 'rejected';
  createdAt: string;
  completedAt?: string;
  description: string;
}

const DataRightsScreen: React.FC = () => {
  const dispatch = useDispatch();
  const { currentMode } = useSelector((state: RootState) => state.app);
  
  const [requests, setRequests] = useState<DataRequest[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showRequestModal, setShowRequestModal] = useState(false);
  const [selectedRequestType, setSelectedRequestType] = useState<string>('');
  const [requestDescription, setRequestDescription] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    loadDataRequests();
  }, []);

  const loadDataRequests = async () => {
    try {
      setIsLoading(true);
      // TODO: Load from backend
      // const dataRequests = await ApiService.getDataRequests();
      // setRequests(dataRequests);
      
      // Mock data for now
      setRequests([
        {
          id: '1',
          type: 'access',
          status: 'completed',
          createdAt: '2024-01-15T10:30:00Z',
          completedAt: '2024-01-20T14:15:00Z',
          description: '–ó–∞—è–≤–∫–∞ –∑–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –≤—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏',
        },
        {
          id: '2',
          type: 'deletion',
          status: 'processing',
          createdAt: '2024-01-18T16:45:00Z',
          description: '–ó–∞—è–≤–∫–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
        },
      ]);
    } catch (error) {
      console.error('Error loading data requests:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const getRequestTypeLabel = (type: string): string => {
    const labels = {
      access: '–î–æ—Å—Ç—ä–ø –¥–æ –¥–∞–Ω–Ω–∏',
      deletion: '–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏',
      portability: '–ü—Ä–µ–Ω–æ—Å –Ω–∞ –¥–∞–Ω–Ω–∏',
      correction: '–ö–æ—Ä–µ–∫—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω–∏',
      restriction: '–û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–Ω–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞',
    };
    return labels[type as keyof typeof labels] || type;
  };

  const getStatusLabel = (status: string): string => {
    const labels = {
      pending: '–ß–∞–∫–∞—â–∞',
      processing: '–û–±—Ä–∞–±–æ—Ç–≤–∞ —Å–µ',
      completed: '–ó–∞–≤—ä—Ä—à–µ–Ω–∞',
      rejected: '–û—Ç—Ö–≤—ä—Ä–ª–µ–Ω–∞',
    };
    return labels[status as keyof typeof labels] || status;
  };

  const getStatusColor = (status: string): string => {
    const colors = {
      pending: '#f39c12',
      processing: '#3498db',
      completed: '#27ae60',
      rejected: '#e74c3c',
    };
    return colors[status as keyof typeof colors] || '#95a5a6';
  };

  const handleRequestData = (type: string) => {
    setSelectedRequestType(type);
    setRequestDescription('');
    setShowRequestModal(true);
  };

  const submitDataRequest = async () => {
    if (!requestDescription.trim()) {
      Alert.alert('–ì—Ä–µ—à–∫–∞', '–ú–æ–ª—è, –æ–ø–∏—à–µ—Ç–µ –∑–∞—è–≤–∫–∞—Ç–∞ —Å–∏.');
      return;
    }

    try {
      setIsSubmitting(true);
      
      // TODO: Submit to backend
      // await ApiService.submitDataRequest({
      //   type: selectedRequestType,
      //   description: requestDescription,
      // });

      // Add to local state
      const newRequest: DataRequest = {
        id: Date.now().toString(),
        type: selectedRequestType as any,
        status: 'pending',
        createdAt: new Date().toISOString(),
        description: requestDescription,
      };

      setRequests(prev => [newRequest, ...prev]);
      setShowRequestModal(false);
      setRequestDescription('');

      Alert.alert(
        '–£—Å–ø–µ—à–Ω–æ',
        '–í–∞—à–∞—Ç–∞ –∑–∞—è–≤–∫–∞ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞. –©–µ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≥–æ–≤–æ—Ä –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ 30 –¥–Ω–∏.',
        [{ text: 'OK' }]
      );

    } catch (error) {
      console.error('Error submitting data request:', error);
      Alert.alert(
        '–ì—Ä–µ—à–∫–∞',
        '–í—ä–∑–Ω–∏–∫–Ω–∞ –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.',
        [{ text: 'OK' }]
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const downloadData = async (requestId: string) => {
    try {
      // TODO: Implement data download
      Alert.alert(
        '–ò–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏',
        '–§—É–Ω–∫—Ü–∏—è—Ç–∞ –∑–∞ –∏–∑—Ç–µ–≥–ª—è–Ω–µ —â–µ –±—ä–¥–µ –¥–æ—Å—Ç—ä–ø–Ω–∞ —Å–∫–æ—Ä–æ.',
        [{ text: 'OK' }]
      );
    } catch (error) {
      console.error('Error downloading data:', error);
    }
  };

  const renderRequestItem = (request: DataRequest) => (
    <View key={request.id} style={styles.requestItem}>
      <View style={styles.requestHeader}>
        <Text style={styles.requestType}>
          {getRequestTypeLabel(request.type)}
        </Text>
        <View style={[styles.statusBadge, { backgroundColor: getStatusColor(request.status) }]}>
          <Text style={styles.statusText}>
            {getStatusLabel(request.status)}
          </Text>
        </View>
      </View>
      
      <Text style={styles.requestDescription}>{request.description}</Text>
      
      <View style={styles.requestMeta}>
        <Text style={styles.requestDate}>
          –°—ä–∑–¥–∞–¥–µ–Ω–∞: {new Date(request.createdAt).toLocaleDateString('bg-BG')}
        </Text>
        {request.completedAt && (
          <Text style={styles.requestDate}>
            –ó–∞–≤—ä—Ä—à–µ–Ω–∞: {new Date(request.completedAt).toLocaleDateString('bg-BG')}
          </Text>
        )}
      </View>

      {request.status === 'completed' && request.type === 'access' && (
        <TouchableOpacity
          style={styles.downloadButton}
          onPress={() => downloadData(request.id)}
        >
          <Text style={styles.downloadButtonText}>üì• –ò–∑—Ç–µ–≥–ª–∏ –¥–∞–Ω–Ω–∏—Ç–µ</Text>
        </TouchableOpacity>
      )}
    </View>
  );

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>–ü—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ</Text>
        <Text style={styles.subtitle}>
          –£–ø—Ä–∞–∂–Ω–µ—Ç–µ –≤–∞—à–∏—Ç–µ GDPR –ø—Ä–∞–≤–∞ –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª –≤—ä—Ä—Ö—É –¥–∞–Ω–Ω–∏—Ç–µ
        </Text>
      </View>

      <View style={styles.infoBanner}>
        <Text style={styles.infoBannerText}>
          üîí –°–ø–æ—Ä–µ–¥ GDPR –∏–º–∞—Ç–µ –ø—Ä–∞–≤–æ –¥–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞—Ç–µ –∫–∞–∫ –¥–∞–Ω–Ω–∏—Ç–µ –≤–∏ —Å–µ –æ–±—Ä–∞–±–æ—Ç–≤–∞—Ç. 
          –í—Å–∏—á–∫–∏ –∑–∞—è–≤–∫–∏ —Å–µ –æ–±—Ä–∞–±–æ—Ç–≤–∞—Ç –≤ —Ä–∞–º–∫–∏—Ç–µ –Ω–∞ 30 –¥–Ω–∏.
        </Text>
      </View>

      <View style={styles.rightsContainer}>
        <Text style={styles.sectionTitle}>–í–∞—à–∏—Ç–µ –ø—Ä–∞–≤–∞:</Text>
        
        <TouchableOpacity
          style={styles.rightItem}
          onPress={() => handleRequestData('access')}
        >
          <Text style={styles.rightTitle}>üëÅÔ∏è –î–æ—Å—Ç—ä–ø –¥–æ –¥–∞–Ω–Ω–∏</Text>
          <Text style={styles.rightDescription}>
            –ü–æ–ª—É—á–µ—Ç–µ –∫–æ–ø–∏–µ –æ—Ç –≤—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏, –∫–æ–∏—Ç–æ —Å—ä—Ö—Ä–∞–Ω—è–≤–∞–º–µ –∑–∞ –≤–∞—Å
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.rightItem}
          onPress={() => handleRequestData('correction')}
        >
          <Text style={styles.rightTitle}>‚úèÔ∏è –ö–æ—Ä–µ–∫—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω–∏</Text>
          <Text style={styles.rightDescription}>
            –ü–æ–ø—Ä–∞–≤–µ—Ç–µ –Ω–µ—Ç–æ—á–Ω–∏ –∏–ª–∏ –Ω–µ–ø—ä–ª–Ω–∏ –¥–∞–Ω–Ω–∏
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.rightItem}
          onPress={() => handleRequestData('deletion')}
        >
          <Text style={styles.rightTitle}>üóëÔ∏è –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏</Text>
          <Text style={styles.rightDescription}>
            –ò–∑—Ç—Ä–∏–π—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ —Å–∏ (–ø—Ä–∞–≤–æ –Ω–∞ –∑–∞–±–≤–µ–Ω–µ)
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.rightItem}
          onPress={() => handleRequestData('portability')}
        >
          <Text style={styles.rightTitle}>üì§ –ü—Ä–µ–Ω–æ—Å –Ω–∞ –¥–∞–Ω–Ω–∏</Text>
          <Text style={styles.rightDescription}>
            –ü–æ–ª—É—á–µ—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–∞–Ω, –º–∞—à–∏–Ω–æ—á–µ—Ç–∏–º —Ñ–æ—Ä–º–∞—Ç
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.rightItem}
          onPress={() => handleRequestData('restriction')}
        >
          <Text style={styles.rightTitle}>‚è∏Ô∏è –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–Ω–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞</Text>
          <Text style={styles.rightDescription}>
            –û–≥—Ä–∞–Ω–∏—á–µ—Ç–µ –∫–∞–∫ –¥–∞–Ω–Ω–∏—Ç–µ –≤–∏ —Å–µ –æ–±—Ä–∞–±–æ—Ç–≤–∞—Ç
          </Text>
        </TouchableOpacity>
      </View>

      <View style={styles.requestsContainer}>
        <Text style={styles.sectionTitle}>–í–∞—à–∏—Ç–µ –∑–∞—è–≤–∫–∏:</Text>
        
        {isLoading ? (
          <ActivityIndicator size="large" color="#3498db" style={styles.loader} />
        ) : requests.length === 0 ? (
          <View style={styles.emptyState}>
            <Text style={styles.emptyStateText}>
              –í—Å–µ –æ—â–µ –Ω—è–º–∞—Ç–µ –∑–∞—è–≤–∫–∏ –∑–∞ –¥–∞–Ω–Ω–∏
            </Text>
          </View>
        ) : (
          requests.map(renderRequestItem)
        )}
      </View>

      <Modal
        visible={showRequestModal}
        animationType="slide"
        transparent={true}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              –ó–∞—è–≤–∫–∞ –∑–∞ {getRequestTypeLabel(selectedRequestType)}
            </Text>
            
            <Text style={styles.modalDescription}>
              –û–±—è—Å–Ω–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∫–∞–∫–≤–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Å —Ç–∞–∑–∏ –∑–∞—è–≤–∫–∞:
            </Text>
            
            <TextInput
              style={styles.modalInput}
              multiline
              numberOfLines={4}
              placeholder="–û–ø–∏—à–µ—Ç–µ –∑–∞—è–≤–∫–∞—Ç–∞ —Å–∏ —Ç—É–∫..."
              value={requestDescription}
              onChangeText={setRequestDescription}
              textAlignVertical="top"
            />
            
            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.modalCancelButton}
                onPress={() => setShowRequestModal(false)}
              >
                <Text style={styles.modalCancelButtonText}>–û—Ç–∫–∞–∑</Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={[styles.modalSubmitButton, isSubmitting && styles.modalSubmitButtonDisabled]}
                onPress={submitDataRequest}
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <ActivityIndicator size="small" color="#fff" />
                ) : (
                  <Text style={styles.modalSubmitButtonText}>–ò–∑–ø—Ä–∞—Ç–∏</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    padding: 20,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#7f8c8d',
    lineHeight: 22,
  },
  infoBanner: {
    backgroundColor: '#e8f4fd',
    margin: 20,
    padding: 16,
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#3498db',
  },
  infoBannerText: {
    fontSize: 14,
    color: '#2980b9',
    lineHeight: 20,
    textAlign: 'center',
  },
  rightsContainer: {
    padding: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 16,
  },
  rightItem: {
    backgroundColor: '#fff',
    padding: 16,
    marginBottom: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  rightTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 8,
  },
  rightDescription: {
    fontSize: 14,
    color: '#7f8c8d',
    lineHeight: 20,
  },
  requestsContainer: {
    padding: 20,
  },
  loader: {
    marginVertical: 40,
  },
  emptyState: {
    padding: 40,
    alignItems: 'center',
  },
  emptyStateText: {
    fontSize: 16,
    color: '#95a5a6',
    textAlign: 'center',
  },
  requestItem: {
    backgroundColor: '#fff',
    padding: 16,
    marginBottom: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  requestHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  requestType: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
    flex: 1,
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  statusText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: '600',
  },
  requestDescription: {
    fontSize: 14,
    color: '#555',
    lineHeight: 20,
    marginBottom: 12,
  },
  requestMeta: {
    marginBottom: 12,
  },
  requestDate: {
    fontSize: 12,
    color: '#7f8c8d',
    marginBottom: 4,
  },
  downloadButton: {
    backgroundColor: '#27ae60',
    padding: 12,
    borderRadius: 6,
    alignItems: 'center',
  },
  downloadButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#fff',
    margin: 20,
    padding: 20,
    borderRadius: 12,
    width: '90%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 16,
    textAlign: 'center',
  },
  modalDescription: {
    fontSize: 14,
    color: '#7f8c8d',
    marginBottom: 16,
    lineHeight: 20,
  },
  modalInput: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    padding: 12,
    fontSize: 14,
    marginBottom: 20,
    minHeight: 100,
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  modalCancelButton: {
    flex: 1,
    padding: 12,
    marginRight: 8,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    alignItems: 'center',
  },
  modalCancelButtonText: {
    color: '#7f8c8d',
    fontSize: 16,
    fontWeight: '600',
  },
  modalSubmitButton: {
    flex: 1,
    backgroundColor: '#3498db',
    padding: 12,
    marginLeft: 8,
    borderRadius: 6,
    alignItems: 'center',
  },
  modalSubmitButtonDisabled: {
    backgroundColor: '#95a5a6',
  },
  modalSubmitButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default DataRightsScreen;
