import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Alert,
} from 'react-native';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../store';
import { setCurrentMode } from '../store/slices/appSlice';

interface QuickAction {
  id: string;
  title: string;
  description: string;
  icon: string;
  color: string;
  action: () => void;
  badge?: number;
  disabled?: boolean;
}

interface QuickActionsProps {
  onNavigateToChat: () => void;
  onNavigateToContacts: () => void;
  onNavigateToSettings: () => void;
}

const QuickActions: React.FC<QuickActionsProps> = ({
  onNavigateToChat,
  onNavigateToContacts,
  onNavigateToSettings,
}) => {
  const dispatch = useDispatch();
  const { currentMode, businessHours } = useSelector((state: RootState) => state.app);
  const { calls } = useSelector((state: RootState) => state.calls);

  const handleModeChange = (mode: string) => {
    Alert.alert(
      '–ü—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ä–µ–∂–∏–º',
      `–ò—Å–∫–∞—Ç–µ –ª–∏ –¥–∞ –ø—Ä–µ–º–∏–Ω–µ—Ç–µ –≤ —Ä–µ–∂–∏–º "${getModeLabel(mode)}"?`,
      [
        { text: '–û—Ç–∫–∞–∑', style: 'cancel' },
        {
          text: '–ü—Ä–æ–º–µ–Ω–∏',
          onPress: () => {
            dispatch(setCurrentMode(mode as any));
            Alert.alert('–£—Å–ø–µ—à–Ω–æ', `–†–µ–∂–∏–º—ä—Ç –µ –ø—Ä–æ–º–µ–Ω–µ–Ω –Ω–∞ "${getModeLabel(mode)}"`);
          },
        },
      ]
    );
  };

  const getModeLabel = (mode: string): string => {
    const labels = {
      normal: '–ù–æ—Ä–º–∞–ª–µ–Ω',
      job_site: '–ù–∞ –æ–±–µ–∫—Ç',
      vacation: '–í–∞–∫–∞–Ω—Ü–∏—è',
      emergency_only: '–°–∞–º–æ —Å–ø–µ—à–Ω–∏',
    };
    return labels[mode as keyof typeof labels] || mode;
  };

  const getCurrentModeColor = (): string => {
    const colors = {
      normal: '#27ae60',
      job_site: '#f39c12',
      vacation: '#3498db',
      emergency_only: '#e74c3c',
    };
    return colors[currentMode as keyof typeof colors] || '#27ae60';
  };

  const handleEmergencyMode = () => {
    Alert.alert(
      'üö® –°–ø–µ—à–µ–Ω —Ä–µ–∂–∏–º',
      '–í —Å–ø–µ—à–Ω–∏—è —Ä–µ–∂–∏–º —â–µ –ø–æ–ª—É—á–∞–≤–∞—Ç–µ –∏–∑–≤–µ—Å—Ç–∏—è —Å–∞–º–æ –∑–∞ —Å–ø–µ—à–Ω–∏ –æ–±–∞–∂–¥–∞–Ω–∏—è –∏ AI —â–µ –æ—Ç–≥–æ–≤–∞—Ä—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞ –≤—Å–∏—á–∫–∏ –æ—Å—Ç–∞–Ω–∞–ª–∏.',
      [
        { text: '–û—Ç–∫–∞–∑', style: 'cancel' },
        {
          text: '–ê–∫—Ç–∏–≤–∏—Ä–∞–π',
          style: 'destructive',
          onPress: () => {
            dispatch(setCurrentMode('emergency_only'));
            Alert.alert('–ê–∫—Ç–∏–≤–∏—Ä–∞–Ω', '–°–ø–µ—à–Ω–∏—è—Ç —Ä–µ–∂–∏–º –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω!');
          },
        },
      ]
    );
  };

  const handleBusinessHoursToggle = () => {
    Alert.alert(
      '–†–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ',
      businessHours.isActive 
        ? '–ò—Å–∫–∞—Ç–µ –ª–∏ –¥–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞—Ç–µ —Ä–∞–±–æ—Ç–Ω–æ—Ç–æ –≤—Ä–µ–º–µ?' 
        : '–ò—Å–∫–∞—Ç–µ –ª–∏ –¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–∞—Ç–µ —Ä–∞–±–æ—Ç–Ω–æ—Ç–æ –≤—Ä–µ–º–µ?',
      [
        { text: '–û—Ç–∫–∞–∑', style: 'cancel' },
        {
          text: businessHours.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–π' : '–ê–∫—Ç–∏–≤–∏—Ä–∞–π',
          onPress: () => {
            // TODO: Toggle business hours
            Alert.alert(
              '–£—Å–ø–µ—à–Ω–æ', 
              `–†–∞–±–æ—Ç–Ω–æ—Ç–æ –≤—Ä–µ–º–µ –µ ${businessHours.isActive ? '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–æ' : '–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–æ'}!`
            );
          },
        },
      ]
    );
  };

  const quickActions: QuickAction[] = [
    {
      id: 'chat',
      title: 'üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–∏',
      description: '–ü—Ä–µ–≥–ª–µ–¥–∞–π AI —Ä–∞–∑–≥–æ–≤–æ—Ä–∏ –∏ –ø–æ–µ–º–∏ —á–∞—Ç–æ–≤–µ',
      icon: 'üí¨',
      color: '#3498db',
      action: onNavigateToChat,
      badge: calls.length > 0 ? calls.length : undefined,
    },
    {
      id: 'contacts',
      title: 'üë• –ö–æ–Ω—Ç–∞–∫—Ç–∏',
      description: '–£–ø—Ä–∞–≤–ª—è–≤–∞–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏',
      icon: 'üë•',
      color: '#27ae60',
      action: onNavigateToContacts,
    },
    {
      id: 'mode_normal',
      title: '‚úÖ –ù–æ—Ä–º–∞–ª–µ–Ω —Ä–µ–∂–∏–º',
      description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω —Ä–µ–∂–∏–º –Ω–∞ —Ä–∞–±–æ—Ç–∞',
      icon: '‚úÖ',
      color: '#27ae60',
      action: () => handleModeChange('normal'),
      disabled: currentMode === 'normal',
    },
    {
      id: 'mode_job_site',
      title: 'üèóÔ∏è –ù–∞ –æ–±–µ–∫—Ç',
      description: '–†–µ–∂–∏–º –∑–∞ —Ä–∞–±–æ—Ç–∞ –Ω–∞ –æ–±–µ–∫—Ç',
      icon: 'üèóÔ∏è',
      color: '#f39c12',
      action: () => handleModeChange('job_site'),
      disabled: currentMode === 'job_site',
    },
    {
      id: 'mode_vacation',
      title: 'üèñÔ∏è –í–∞–∫–∞–Ω—Ü–∏—è',
      description: '–†–µ–∂–∏–º –∑–∞ –≤–∞–∫–∞–Ω—Ü–∏—è',
      icon: 'üèñÔ∏è',
      color: '#3498db',
      action: () => handleModeChange('vacation'),
      disabled: currentMode === 'vacation',
    },
    {
      id: 'emergency_mode',
      title: 'üö® –°–ø–µ—à–µ–Ω —Ä–µ–∂–∏–º',
      description: '–°–∞–º–æ –∑–∞ —Å–ø–µ—à–Ω–∏ –æ–±–∞–∂–¥–∞–Ω–∏—è',
      icon: 'üö®',
      color: '#e74c3c',
      action: handleEmergencyMode,
      disabled: currentMode === 'emergency_only',
    },
    {
      id: 'business_hours',
      title: businessHours.isActive ? 'üïê –†–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ' : '‚è∞ –ò–∑–≤—ä–Ω —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ',
      description: businessHours.isActive 
        ? '–ê–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ' 
        : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ',
      icon: businessHours.isActive ? 'üïê' : '‚è∞',
      color: businessHours.isActive ? '#27ae60' : '#95a5a6',
      action: handleBusinessHoursToggle,
    },
    {
      id: 'settings',
      title: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ',
      icon: '‚öôÔ∏è',
      color: '#7f8c8d',
      action: onNavigateToSettings,
    },

  ];

  const renderQuickAction = (action: QuickAction) => (
    <TouchableOpacity
      key={action.id}
      style={[
        styles.actionCard,
        { borderLeftColor: action.color },
        action.disabled && styles.actionCardDisabled,
      ]}
      onPress={action.action}
      disabled={action.disabled}
    >
      <View style={styles.actionHeader}>
        <Text style={styles.actionIcon}>{action.icon}</Text>
        <View style={styles.actionInfo}>
          <Text style={[
            styles.actionTitle,
            action.disabled && styles.actionTitleDisabled
          ]}>
            {action.title}
          </Text>
          <Text style={[
            styles.actionDescription,
            action.disabled && styles.actionDescriptionDisabled
          ]}>
            {action.description}
          </Text>
        </View>
        {action.badge && action.badge > 0 && (
          <View style={styles.badge}>
            <Text style={styles.badgeText}>
              {action.badge > 99 ? '99+' : action.badge}
            </Text>
          </View>
        )}
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>‚ö° –ë—ä—Ä–∑–∏ –¥–µ–π—Å—Ç–≤–∏—è</Text>
        <Text style={styles.subtitle}>
          –ë—ä—Ä–∑ –¥–æ—Å—Ç—ä–ø –¥–æ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏
        </Text>
      </View>

      <View style={styles.currentModeCard}>
        <Text style={styles.currentModeTitle}>–¢–µ–∫—É—â —Ä–µ–∂–∏–º:</Text>
        <View style={styles.currentModeInfo}>
          <View style={[styles.modeIndicator, { backgroundColor: getCurrentModeColor() }]}>
            <Text style={styles.modeIndicatorText}>
              {getModeLabel(currentMode)}
            </Text>
          </View>
          <Text style={styles.currentModeDescription}>
            {currentMode === 'normal' && '–°—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω —Ä–µ–∂–∏–º –Ω–∞ —Ä–∞–±–æ—Ç–∞'}
            {currentMode === 'job_site' && '–†–∞–±–æ—Ç–∞ –Ω–∞ –æ–±–µ–∫—Ç - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}
            {currentMode === 'vacation' && '–í–∞–∫–∞–Ω—Ü–∏—è - –º–∏–Ω–∏–º–∞–ª–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}
            {currentMode === 'emergency_only' && '–°–∞–º–æ —Å–ø–µ—à–Ω–∏ –æ–±–∞–∂–¥–∞–Ω–∏—è'}
          </Text>
        </View>
      </View>

      <ScrollView style={styles.actionsContainer} showsVerticalScrollIndicator={false}>
        <View style={styles.actionsGrid}>
          {quickActions.map(renderQuickAction)}
        </View>
      </ScrollView>

      <View style={styles.infoSection}>
        <Text style={styles.infoTitle}>üí° –°—ä–≤–µ—Ç–∏</Text>
        <Text style={styles.infoText}>
          ‚Ä¢ –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ "–ù–∞ –æ–±–µ–∫—Ç" —Ä–µ–∂–∏–º–∞, –∫–æ–≥–∞—Ç–æ —Ä–∞–±–æ—Ç–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞
        </Text>
        <Text style={styles.infoText}>
          ‚Ä¢ "–í–∞–∫–∞–Ω—Ü–∏—è" —Ä–µ–∂–∏–º—ä—Ç –Ω–∞–º–∞–ª—è–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ç–∞ –¥–æ –º–∏–Ω–∏–º—É–º
        </Text>
        <Text style={styles.infoText}>
          ‚Ä¢ "–°–ø–µ—à–µ–Ω —Ä–µ–∂–∏–º" –µ –∑–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–∞—Ç–æ –º–æ–∂–µ—Ç–µ –¥–∞ –æ—Ç–≥–æ–≤–∞—Ä—è—Ç–µ —Å–∞–º–æ –Ω–∞ —Å–ø–µ—à–Ω–∏ —Å–ª—É—á–∞–∏
        </Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    padding: 20,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#7f8c8d',
    lineHeight: 22,
  },
  currentModeCard: {
    backgroundColor: '#fff',
    margin: 20,
    padding: 16,
    borderRadius: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#3498db',
  },
  currentModeTitle: {
    fontSize: 14,
    color: '#7f8c8d',
    marginBottom: 8,
  },
  currentModeInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  modeIndicator: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    marginRight: 12,
  },
  modeIndicatorText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  currentModeDescription: {
    fontSize: 14,
    color: '#2c3e50',
    flex: 1,
    lineHeight: 20,
  },
  actionsContainer: {
    flex: 1,
  },
  actionsGrid: {
    padding: 20,
  },
  actionCard: {
    backgroundColor: '#fff',
    padding: 16,
    marginBottom: 12,
    borderRadius: 8,
    borderLeftWidth: 4,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  actionCardDisabled: {
    opacity: 0.6,
  },
  actionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  actionIcon: {
    fontSize: 24,
    marginRight: 16,
  },
  actionInfo: {
    flex: 1,
  },
  actionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 4,
  },
  actionTitleDisabled: {
    color: '#95a5a6',
  },
  actionDescription: {
    fontSize: 14,
    color: '#7f8c8d',
    lineHeight: 18,
  },
  actionDescriptionDisabled: {
    color: '#bdc3c7',
  },
  badge: {
    backgroundColor: '#e74c3c',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
    minWidth: 24,
    alignItems: 'center',
  },
  badgeText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  infoSection: {
    backgroundColor: '#fff',
    margin: 20,
    padding: 20,
    borderRadius: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#f39c12',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 12,
  },
  infoText: {
    fontSize: 14,
    color: '#555',
    lineHeight: 20,
    marginBottom: 8,
  },
});

export default QuickActions;
