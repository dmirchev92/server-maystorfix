'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/contexts/AuthContext'
import { Header } from '@/components/Header'
import { Footer } from '@/components/Footer'
import UnifiedCaseModal from '@/components/UnifiedCaseModal'
import ChatWidget from '@/components/ChatWidget'
import { apiClient } from '@/lib/api'

export default function CreateCasePage() {
  const router = useRouter()
  const { user, isAuthenticated } = useAuth()
  const [caseModalOpen, setCaseModalOpen] = useState(false)

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/auth/login')
    }
  }, [isAuthenticated, router])

  // Open modal automatically when page loads
  useEffect(() => {
    if (isAuthenticated) {
      setCaseModalOpen(true)
    }
  }, [isAuthenticated])

  const handleCaseSubmit = async (formData: any) => {
    try {
      // Prepare case data for open case (no specific provider)
      const caseData = {
        ...formData,
        providerId: null, // No specific provider
        providerName: null,
        isOpenCase: true, // This is an open case for all providers
        customerId: user?.id, // Add customer ID
        category: formData.serviceType || 'general' // Map service type to category
      }

      console.log('Creating open case with data:', caseData)
      
      // Submit the case using the API client
      const response = await apiClient.createCase(caseData)
      
      if (response.data?.success) {
        // Close modal and show success message
        setCaseModalOpen(false)
        
        const successMessage = '–ó–∞—è–≤–∫–∞—Ç–∞ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞ –∏ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞ –∑–∞ –≤—Å–∏—á–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∏! –©–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ —Å–∫–æ—Ä–æ.'
        
        alert(successMessage)
        
        // Redirect to dashboard or home
        router.push('/dashboard')
      } else {
        throw new Error(response.data?.message || 'Failed to create case')
      }
    } catch (error) {
      console.error('Error creating case:', error)
      alert('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.')
    }
  }

  const handleModalClose = () => {
    setCaseModalOpen(false)
    // Redirect back to home when modal is closed
    router.push('/')
  }

  if (!isAuthenticated) {
    return null // Will redirect to login
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900 relative overflow-hidden">
      {/* Industrial background elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 left-0 w-96 h-96 bg-gradient-to-br from-indigo-500/10 to-slate-500/10 rounded-lg blur-3xl"></div>
        <div className="absolute bottom-0 right-0 w-80 h-80 bg-gradient-to-br from-purple-500/10 to-slate-500/10 rounded-lg blur-3xl"></div>
      </div>

      <Header />
      
      <main className="relative z-10 container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Page Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-white mb-4">
              –°—ä–∑–¥–∞–π –Ω–æ–≤–∞ –∑–∞—è–≤–∫–∞
            </h1>
            <p className="text-xl text-slate-300 mb-8">
              –û–ø–∏—à–µ—Ç–µ —É—Å–ª—É–≥–∞—Ç–∞, –∫–æ—è—Ç–æ —Ç—ä—Ä—Å–∏—Ç–µ –∏ –Ω–∏–µ —â–µ –≤–∏ —Å–≤—ä—Ä–∂–µ–º —Å –ø–æ–¥—Ö–æ–¥—è—â–∏ –º–∞–π—Å—Ç–æ—Ä–∏
            </p>
          </div>

          {/* Instructions */}
          <div className="bg-white/10 backdrop-blur-md rounded-xl shadow-xl border border-white/20 p-6 mb-8">
            <h2 className="text-2xl font-semibold text-white mb-6">
              –ö–∞–∫ —Ä–∞–±–æ—Ç–∏?
            </h2>
            <div className="grid md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500/20 to-indigo-500/20 border border-blue-400/30 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">üìù</span>
                </div>
                <h3 className="font-semibold text-white mb-2">1. –û–ø–∏—à–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º–∞</h3>
                <p className="text-slate-300 text-sm">
                  –†–∞–∑–∫–∞–∂–µ—Ç–µ –∫–∞–∫–≤–æ —Ç–æ—á–Ω–æ –≤–∏ —Ç—Ä—è–±–≤–∞ –∏ –∫–æ–≥–∞
                </p>
              </div>
              <div className="text-center">
                <div className="w-16 h-16 bg-gradient-to-br from-green-500/20 to-emerald-500/20 border border-green-400/30 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">üîç</span>
                </div>
                <h3 className="font-semibold text-white mb-2">2. –ü–æ–ª—É—á–µ—Ç–µ –æ—Ñ–µ—Ä—Ç–∏</h3>
                <p className="text-slate-300 text-sm">
                  –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∏—Ç–µ —â–µ –≤–∏ –∏–∑–ø—Ä–∞—Ç—è—Ç —Å–≤–æ–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                </p>
              </div>
              <div className="text-center">
                <div className="w-16 h-16 bg-gradient-to-br from-purple-500/20 to-pink-500/20 border border-purple-400/30 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">‚úÖ</span>
                </div>
                <h3 className="font-semibold text-white mb-2">3. –ò–∑–±–µ—Ä–µ—Ç–µ –Ω–∞–π-–¥–æ–±—Ä–∏—è</h3>
                <p className="text-slate-300 text-sm">
                  –°—Ä–∞–≤–Ω–µ—Ç–µ –æ—Ñ–µ—Ä—Ç–∏—Ç–µ –∏ –∏–∑–±–µ—Ä–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—è –º–∞–π—Å—Ç–æ—Ä
                </p>
              </div>
            </div>
          </div>

          {/* Create Case Button */}
          <div className="text-center">
            <button
              onClick={() => setCaseModalOpen(true)}
              className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-4 px-8 rounded-lg hover:shadow-lg transform hover:scale-105 transition-all duration-300 text-lg font-medium"
            >
              üìã –°—ä–∑–¥–∞–π –∑–∞—è–≤–∫–∞ —Å–µ–≥–∞
            </button>
          </div>
        </div>
      </main>
      
      <Footer />

      {/* Case Creation Modal - Same as in search page */}
      <UnifiedCaseModal
        isOpen={caseModalOpen}
        onClose={handleModalClose}
        onSubmit={handleCaseSubmit}
        providerName="–í—Å–∏—á–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∏" // For open cases
        providerId={undefined} // No specific provider
        providerCategory="general" // General category for open cases
        customerPhone={user?.phoneNumber || ''}
        mode="direct"
      />

      {/* Chat Widget */}
      <ChatWidget />
    </div>
  )
}