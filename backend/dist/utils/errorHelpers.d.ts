import { ServiceTextProError } from '../types';
export declare const unauthorized: (message?: string) => ServiceTextProError;
export declare const invalidToken: (message?: string) => ServiceTextProError;
export declare const invalidCredentials: (message?: string) => ServiceTextProError;
export declare const forbidden: (message?: string) => ServiceTextProError;
export declare const insufficientPermissions: (message?: string) => ServiceTextProError;
export declare const badRequest: (message: string) => ServiceTextProError;
export declare const missingParameters: (params: string[]) => ServiceTextProError;
export declare const invalidParameters: (message: string) => ServiceTextProError;
export declare const validationError: (message: string) => ServiceTextProError;
export declare const invalidFormat: (field: string, expected: string) => ServiceTextProError;
export declare const notFound: (resource: string) => ServiceTextProError;
export declare const userNotFound: (userId?: string) => ServiceTextProError;
export declare const caseNotFound: (caseId?: string) => ServiceTextProError;
export declare const providerNotFound: (providerId?: string) => ServiceTextProError;
export declare const notificationNotFound: (notificationId?: string) => ServiceTextProError;
export declare const reviewNotFound: (reviewId?: string) => ServiceTextProError;
export declare const conversationNotFound: (conversationId?: string) => ServiceTextProError;
export declare const conflict: (message: string) => ServiceTextProError;
export declare const alreadyExists: (resource: string) => ServiceTextProError;
export declare const reviewExists: (caseId: string) => ServiceTextProError;
export declare const internalError: (message?: string) => ServiceTextProError;
export declare const databaseError: (message?: string) => ServiceTextProError;
export declare const serviceUnavailable: (message?: string) => ServiceTextProError;
export declare const operationFailed: (operation: string, reason?: string) => ServiceTextProError;
export declare const customError: (message: string, code: string, statusCode: number) => ServiceTextProError;
export declare const asyncHandler: (fn: Function) => (req: any, res: any, next: any) => void;
//# sourceMappingURL=errorHelpers.d.ts.map