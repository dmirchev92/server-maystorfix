const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcryptjs');

// Connect to database
const dbPath = path.join(__dirname, 'data', 'servicetext_pro.db');
const db = new sqlite3.Database(dbPath);

console.log('üîß Creating test users for ServiceText Pro...');

// Test users data
const testUsers = [
  {
    id: uuidv4(),
    email: 'test@servicetext.pro',
    password: 'password123',
    role: 'service_provider',
    firstName: '–¢–µ—Å—Ç',
    lastName: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
    phoneNumber: '+359888000001',
    businessName: '–¢–µ—Å—Ç –ï–ª–µ–∫—Ç—Ä–æ –ï–û–û–î',
    serviceCategory: 'electrician',
    description: '–¢–µ—Å—Ç–æ–≤ –µ–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫ –∑–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞.',
    experienceYears: 10,
    hourlyRate: 45.00,
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–¶–µ–Ω—Ç—ä—Ä',
    address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞ 1',
    rating: 4.8,
    totalReviews: 50
  },
  {
    id: uuidv4(),
    email: 'admin@servicetext.pro',
    password: 'admin123',
    role: 'service_provider',
    firstName: '–ê–¥–º–∏–Ω',
    lastName: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
    phoneNumber: '+359888000002',
    businessName: '–ê–¥–º–∏–Ω –£—Å–ª—É–≥–∏ –û–û–î',
    serviceCategory: 'handyman',
    description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ.',
    experienceYears: 15,
    hourlyRate: 50.00,
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–õ–æ–∑–µ–Ω–µ—Ü',
    address: '—É–ª. –ê–¥–º–∏–Ω—Å–∫–∞ 2',
    rating: 5.0,
    totalReviews: 25
  },
  {
    id: uuidv4(),
    email: 'customer@servicetext.pro',
    password: 'customer123',
    role: 'customer',
    firstName: '–ö–ª–∏–µ–Ω—Ç',
    lastName: '–¢–µ—Å—Ç–æ–≤',
    phoneNumber: '+359888000003'
  }
];

async function createTestUsers() {
  try {
    console.log('üìù Creating test users...');
    
    for (const userData of testUsers) {
      // Hash password
      const passwordHash = await bcrypt.hash(userData.password, 10);
      
      // Insert user
      await new Promise((resolve, reject) => {
        db.run(
          `INSERT OR REPLACE INTO users (id, email, password_hash, role, first_name, last_name, phone_number, created_at) 
           VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            userData.id,
            userData.email,
            passwordHash,
            userData.role,
            userData.firstName,
            userData.lastName,
            userData.phoneNumber,
            new Date().toISOString()
          ],
          function(err) {
            if (err) reject(err);
            else resolve();
          }
        );
      });

      // Insert service provider profile if applicable
      if (userData.role === 'service_provider' && userData.businessName) {
        await new Promise((resolve, reject) => {
          db.run(
            `INSERT OR REPLACE INTO service_provider_profiles (
              id, user_id, business_name, service_category, description, experience_years,
              hourly_rate, city, neighborhood, address, rating, total_reviews, 
              is_verified, is_active, created_at, updated_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
              uuidv4(),
              userData.id,
              userData.businessName,
              userData.serviceCategory,
              userData.description,
              userData.experienceYears,
              userData.hourlyRate,
              userData.city,
              userData.neighborhood,
              userData.address,
              userData.rating,
              userData.totalReviews,
              1, // is_verified
              1, // is_active
              new Date().toISOString(),
              new Date().toISOString()
            ],
            function(err) {
              if (err) reject(err);
              else resolve();
            }
          );
        });
      }

      console.log(`‚úÖ Created user: ${userData.email} (${userData.role})`);
    }

    console.log('üéØ Adding service categories...');
    
    const categories = [
      { id: uuidv4(), name: 'electrician', name_bg: '–ï–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫', description: '–ï–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —É—Å–ª—É–≥–∏', icon_name: 'electric' },
      { id: uuidv4(), name: 'plumber', name_bg: '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥—á–∏–∫', description: '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–∏ —É—Å–ª—É–≥–∏', icon_name: 'plumbing' },
      { id: uuidv4(), name: 'hvac', name_bg: '–ö–ª–∏–º–∞—Ç–∏–∫', description: '–ö–ª–∏–º–∞—Ç–∏—á–Ω–∏ —Å–∏—Å—Ç–µ–º–∏', icon_name: 'hvac' },
      { id: uuidv4(), name: 'carpenter', name_bg: '–î—ä—Ä–≤–æ–¥–µ–ª–µ—Ü', description: '–î—ä—Ä–≤–æ–¥–µ–ª—Å–∫–∏ —É—Å–ª—É–≥–∏', icon_name: 'carpenter' },
      { id: uuidv4(), name: 'painter', name_bg: '–ë–æ—è–¥–∂–∏—è', description: '–ë–æ—è–¥–∏—Å–≤–∞–Ω–µ', icon_name: 'painter' },
      { id: uuidv4(), name: 'locksmith', name_bg: '–ö–ª—é—á–∞—Ä', description: '–ö–ª—é—á–∞—Ä—Å–∫–∏ —É—Å–ª—É–≥–∏', icon_name: 'locksmith' },
      { id: uuidv4(), name: 'cleaner', name_bg: '–ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ', description: '–ü–æ—á–∏—Å—Ç–≤–∞—â–∏ —É—Å–ª—É–≥–∏', icon_name: 'cleaner' },
      { id: uuidv4(), name: 'gardener', name_bg: '–ì—Ä–∞–¥–∏–Ω–∞—Ä', description: '–ì—Ä–∞–¥–∏–Ω–∞—Ä—Å–∫–∏ —É—Å–ª—É–≥–∏', icon_name: 'gardener' },
      { id: uuidv4(), name: 'handyman', name_bg: '–ú–∞–π—Å—Ç–æ—Ä –∑–∞ –≤—Å–∏—á–∫–æ', description: '–û–±—â–∏ —Ä–µ–º–æ–Ω—Ç–∏', icon_name: 'handyman' },
      { id: uuidv4(), name: 'appliance_repair', name_bg: '–†–µ–º–æ–Ω—Ç –Ω–∞ —É—Ä–µ–¥–∏', description: '–†–µ–º–æ–Ω—Ç –Ω–∞ –¥–æ–º–∞–∫–∏–Ω—Å–∫–∏ —É—Ä–µ–¥–∏', icon_name: 'appliance' }
    ];

    for (const category of categories) {
      await new Promise((resolve, reject) => {
        db.run(
          `INSERT OR IGNORE INTO service_categories (id, name, name_bg, description, icon_name, created_at) 
           VALUES (?, ?, ?, ?, ?, ?)`,
          [category.id, category.name, category.name_bg, category.description, category.icon_name, new Date().toISOString()],
          function(err) {
            if (err) reject(err);
            else resolve();
          }
        );
      });
    }

    console.log('‚úÖ Test data created successfully!');
    console.log('\nüîë Test Login Credentials:');
    console.log('Service Provider: test@servicetext.pro / password123');
    console.log('Admin User: admin@servicetext.pro / admin123');
    console.log('Customer: customer@servicetext.pro / customer123');
    console.log('\nüìä Database populated with:');
    console.log(`- ${testUsers.length} test users`);
    console.log(`- ${categories.length} service categories`);
    console.log(`- ${testUsers.filter(u => u.role === 'service_provider').length} service provider profiles`);
    
  } catch (error) {
    console.error('‚ùå Error creating test data:', error);
  } finally {
    db.close();
  }
}

createTestUsers();
