const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcryptjs');

const dbPath = path.join(__dirname, '..', 'data', 'servicetext_pro.db');

console.log('üë∑ Creating 5 mockup service providers');
console.log('üìÅ Database path:', dbPath);

const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå Error opening database:', err.message);
    process.exit(1);
  }
  console.log('‚úÖ Connected to database\n');
});

// Mockup providers data
const providers = [
  {
    firstName: '–ò–≤–∞–Ω',
    lastName: '–ü–µ—Ç—Ä–æ–≤',
    email: 'ivan.petrov@test.bg',
    phone: '+359888111111',
    businessName: '–ï–ª–µ–∫—Ç—Ä–æ –ï–∫—Å–ø–µ—Ä—Ç',
    category: 'electrician',
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–ú–ª–∞–¥–æ—Å—Ç 1',
    description: '–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–µ–Ω –µ–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫ —Å 10 –≥–æ–¥–∏–Ω–∏ –æ–ø–∏—Ç',
    experienceYears: 10,
    hourlyRate: 50
  },
  {
    firstName: '–ì–µ–æ—Ä–≥–∏',
    lastName: '–î–∏–º–∏—Ç—Ä–æ–≤',
    email: 'georgi.dimitrov@test.bg',
    phone: '+359888222222',
    businessName: '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥ –ú–∞–π—Å—Ç–æ—Ä',
    category: 'plumber',
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–õ—é–ª–∏–Ω',
    description: '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥—á–∏–∫ —Å –±–æ–≥–∞—Ç –æ–ø–∏—Ç –≤ —Ä–µ–º–æ–Ω—Ç–∏',
    experienceYears: 8,
    hourlyRate: 45
  },
  {
    firstName: '–ú–∞—Ä–∏—è',
    lastName: '–ò–≤–∞–Ω–æ–≤–∞',
    email: 'maria.ivanova@test.bg',
    phone: '+359888333333',
    businessName: '–ß–∏—Å—Ç–æ –∏ –ö—Ä–∞—Å–∏–≤–æ',
    category: 'cleaner',
    city: '–°–æ—Ñ–∏—è',
    neighborhood: '–õ–æ–∑–µ–Ω–µ—Ü',
    description: '–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–æ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –¥–æ–º–æ–≤–µ –∏ –æ—Ñ–∏—Å–∏',
    experienceYears: 5,
    hourlyRate: 30
  },
  {
    firstName: '–ü–µ—Ç—ä—Ä',
    lastName: '–°—Ç–æ—è–Ω–æ–≤',
    email: 'petar.stoyanov@test.bg',
    phone: '+359888444444',
    businessName: '–ö–ª–∏–º–∞—Ç–∏–∫ –°–µ—Ä–≤–∏–∑ –ü–ª–æ–≤–¥–∏–≤',
    category: 'hvac',
    city: '–ü–ª–æ–≤–¥–∏–≤',
    neighborhood: null,
    description: '–ú–æ–Ω—Ç–∞–∂ –∏ —Ä–µ–º–æ–Ω—Ç –Ω–∞ –∫–ª–∏–º–∞—Ç–∏—á–Ω–∏ —Å–∏—Å—Ç–µ–º–∏',
    experienceYears: 12,
    hourlyRate: 60
  },
  {
    firstName: '–°—Ç–µ—Ñ–∞–Ω',
    lastName: '–ù–∏–∫–æ–ª–æ–≤',
    email: 'stefan.nikolov@test.bg',
    phone: '+359888555555',
    businessName: '–ë–æ—è–¥–∏—Å–≤–∞–Ω–µ –í–∞—Ä–Ω–∞',
    category: 'painter',
    city: '–í–∞—Ä–Ω–∞',
    neighborhood: null,
    description: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–æ –±–æ—è–¥–∏—Å–≤–∞–Ω–µ –Ω–∞ –∂–∏–ª–∏—â–∞ –∏ –æ—Ñ–∏—Å–∏',
    experienceYears: 7,
    hourlyRate: 40
  }
];

const password = 'Test123!'; // Simple password for all test accounts

async function createProvider(provider) {
  return new Promise(async (resolve, reject) => {
    const userId = uuidv4();
    const hashedPassword = await bcrypt.hash(password, 10);
    const now = new Date().toISOString();

    // Insert user
    db.run(
      `INSERT INTO users (
        id, email, password_hash, first_name, last_name, phone_number, 
        role, status, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        userId,
        provider.email,
        hashedPassword,
        provider.firstName,
        provider.lastName,
        provider.phone,
        'tradesperson',
        'active',
        now,
        now
      ],
      function(err) {
        if (err) {
          if (err.message.includes('UNIQUE constraint failed')) {
            console.log(`‚ö†Ô∏è  User ${provider.email} already exists, skipping...`);
            resolve(false);
          } else {
            reject(err);
          }
          return;
        }

        console.log(`‚úÖ Created user: ${provider.firstName} ${provider.lastName} (${provider.email})`);

        // Insert service provider profile
        const profileId = uuidv4();
        db.run(
          `INSERT INTO service_provider_profiles (
            id, user_id, business_name, service_category, description,
            experience_years, hourly_rate, city, neighborhood,
            phone_number, email, is_active, rating, total_reviews,
            created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            profileId,
            userId,
            provider.businessName,
            provider.category,
            provider.description,
            provider.experienceYears,
            provider.hourlyRate,
            provider.city,
            provider.neighborhood,
            provider.phone,
            provider.email,
            1, // is_active
            4.5, // default rating
            0, // total_reviews
            now,
            now
          ],
          function(err) {
            if (err) {
              reject(err);
            } else {
              console.log(`   üìã Created profile: ${provider.businessName} - ${provider.city}${provider.neighborhood ? ', ' + provider.neighborhood : ''}`);
              resolve(true);
            }
          }
        );
      }
    );
  });
}

async function createAllProviders() {
  console.log('üöÄ Starting provider creation...\n');
  
  let created = 0;
  let skipped = 0;

  for (const provider of providers) {
    try {
      const result = await createProvider(provider);
      if (result) {
        created++;
      } else {
        skipped++;
      }
    } catch (error) {
      console.error(`‚ùå Error creating provider ${provider.email}:`, error.message);
    }
  }

  console.log('\nüìä Summary:');
  console.log(`   ‚úÖ Created: ${created} providers`);
  console.log(`   ‚ö†Ô∏è  Skipped: ${skipped} providers (already exist)`);
  console.log(`   üìç Locations:`);
  console.log(`      - –°–æ—Ñ–∏—è, –ú–ª–∞–¥–æ—Å—Ç 1: 1 provider (–ï–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫)`);
  console.log(`      - –°–æ—Ñ–∏—è, –õ—é–ª–∏–Ω: 1 provider (–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥—á–∏–∫)`);
  console.log(`      - –°–æ—Ñ–∏—è, –õ–æ–∑–µ–Ω–µ—Ü: 1 provider (–ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ)`);
  console.log(`      - –ü–ª–æ–≤–¥–∏–≤: 1 provider (–ö–ª–∏–º–∞—Ç–∏–∫)`);
  console.log(`      - –í–∞—Ä–Ω–∞: 1 provider (–ë–æ—è–¥–∂–∏—è)`);
  console.log('\nüîê All test accounts use password: Test123!');
  console.log('\n‚ú® You can now test location filtering on the homepage!');

  db.close();
}

createAllProviders();
